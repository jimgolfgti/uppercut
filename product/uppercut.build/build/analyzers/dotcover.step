<?xml version="1.0" encoding="utf-8" ?>
<project name="dotCover" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - Add custom tasks in BuildTasks.Custom\Analyzers folder with file by the same name - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <include buildfile="..${path.separator}csharp.functions" />
  <property name="file.current.no_extension" value="dotcover" />
  <property name="dirs.current" value="${directory::get-current-directory()}" />  
  <property name="dirs.current.file" value="${directory::get-parent-directory(project::get-buildfile-path())}" />  
  <property name="folder.build_scripts" value="build" overwrite="false" />
  <property name="folder.build_scripts_custom" value="build.custom" overwrite="false" />
  <property name="dirs.build_scripts_custom" value="${dirs.current}${path.separator}${folder.build_scripts_custom}${path.separator}analyzers" />
  <property name="folder.code_build" value="build_output" overwrite="false" />
  <property name="dirs.build" value="${dirs.current}${path.separator}${folder.code_build}" />
  <property name="folder.app.drop" value="${project.name}" overwrite="false" />
  <property name="dirs.build.code" value="${dirs.build}${path.separator}${folder.app.drop}" overwrite="false" />
  <property name="folder.build_artifacts" value="build_artifacts" overwrite="false" />
  <property name="dirs.build_artifacts" value="${path::get-full-path(dirs.build)}${path.separator}${folder.build_artifacts}" />
  <property name="folder.settings" value="settings" overwrite="false" />
  <property name="dirs.settings" value="${dirs.current}${path.separator}${folder.settings}" overwrite="false" />
  <property name="app.dotcover" value="${environment::get-folder-path('ProgramFiles')}${path.separator}JetBrains${path.separator}dotCover${path.separator}v1.1${path.separator}Bin${path.separator}dotCover.exe" overwrite="false" />
  <property name="dirs.dotcover_results" value="${dirs.build_artifacts}${path.separator}dotcover" />
  <property name="files.dotcover_config" value="${dirs.settings}${path.separator}dotCover.conf" />

  <property name="is.replaced" value="false" />
  <property name="fail.build.on.error" value="false" />

  <target name="go" depends="run_tasks" if="${file::exists(app.dotcover)}" />

  <target name="run_tasks" if="${file::exists(app.dotcover)}">
    <echo level="Warning" message="" />
    <echo level="Warning" message="====================" />
    <echo level="Warning" message="${project::get-name()}" />
    <echo level="Warning" message="====================" />
    <call target="prepare" if="${target::exists('prepare')}" />
    <customExtension extends="${project::get-buildfile-path()}" type="pre" failonerror="${fail.build.on.error}" />
    <customExtension extends="${project::get-buildfile-path()}" type="replace" failonerror="${fail.build.on.error}" />
    <call target="run_normal_tasks" if="${not is.replaced}" />
    <customExtension extends="${project::get-buildfile-path()}" type="post" failonerror="${fail.build.on.error}" />
  </target>

  <target name="run_normal_tasks"
          depends="dotcover"
          description="Using dotCover to Analyze project code coverage."
          if="${file::exists(app.dotcover)}" />

  <target name="prepare">
    <echo level="Warning" message="Removing and adding ${dirs.dotcover_results}."/>
    <delete dir="${dirs.dotcover_results}" failonerror="false" />
    <mkdir dir="${dirs.dotcover_results}" />
  </target>

  <target name="dotcover" depends="prepare" if="${file::exists(app.dotcover)}">
    <echo level="Warning" message="Attempting to run dotCover at ${app.dotcover} for file ${files.dotcover_config}." />

    <exec program="${app.dotcover}">
      <arg line="analyse" />
      <arg file="${files.dotcover_config}" />
    </exec>
  </target>
  
</project>